diff -Naur libm.original/libm.c libm.modified/libm.c
--- libm.original/libm.c	1969-12-31 16:00:00.000000000 -0800
+++ libm.modified/libm.c	2010-02-08 22:19:31.000000000 -0800
@@ -0,0 +1,6 @@
+//
+// libm.c
+//
+
+
+// Empty file.  Exists here only to trigger the correct rule in Makefile.src
diff -Naur libm.original/Makefile libm.modified/Makefile
--- libm.original/Makefile	2004-04-22 10:43:11.000000000 -0700
+++ libm.modified/Makefile	2011-09-09 10:23:17.112212996 -0700
@@ -1,110 +1,145 @@
 #
-#  @(#)Makefile 1.4 95/01/18 
-# 
-#  ====================================================
-#  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
-# 
-#  Developed at SunSoft, a Sun Microsystems, Inc. business.
-#  Permission to use, copy, modify, and distribute this
-#  software is freely granted, provided that this notice 
-#  is preserved.
-#  ====================================================
-# 
-# 
-
-#
-# There are two options in making libm at fdlibm compile time:
-# 	_IEEE_LIBM 	--- IEEE libm; smaller, and somewhat faster
-#	_MULTI_LIBM	--- Support multi-standard at runtime by 
-#			    imposing wrapper functions defined in 
-#			    fdlibm.h:
-#				_IEEE_MODE 	-- IEEE
-#				_XOPEN_MODE 	-- X/OPEN
-#				_POSIX_MODE 	-- POSIX/ANSI
-#				_SVID3_MODE 	-- SVID
-#
-# Here is how to set up CFLAGS to create the desired libm at 
-# compile time:
-#
-# 	CFLAGS = -D_IEEE_LIBM		... IEEE libm (recommended)
-#	CFLAGS = -D_SVID3_MODE	... Multi-standard supported
-#					    libm with SVID as the 
-#					    default standard
-#	CFLAGS = -D_XOPEN_MODE	... Multi-standard supported
-#					    libm with XOPEN as the 
-#					    default standard
-#	CFLAGS = -D_POSIX_MODE	... Multi-standard supported
-#					    libm with POSIX as the 
-#					    default standard
-#	CFLAGS = 			... Multi-standard supported
-#					    libm with IEEE as the 
-#					    default standard
-# 
-# NOTE: if scalb's second arguement is an int, then one must
-# define _SCALB_INT in CFLAGS. The default prototype of scalb
-# is double scalb(double, double)
-#
-
-
-#
-# Default IEEE libm
-#
-CFLAGS = -D_IEEE_LIBM 
-
-CC = cc
-
-INCFILES = fdlibm.h
-.INIT: $(INCFILES)
-.KEEP_STATE:
-src = 	k_standard.c k_rem_pio2.c \
-	k_cos.c k_sin.c k_tan.c \
-	e_acos.c e_acosh.c e_asin.c e_atan2.c \
-	e_atanh.c e_cosh.c e_exp.c e_fmod.c \
-	e_gamma.c e_gamma_r.c e_hypot.c e_j0.c \
-	e_j1.c e_jn.c e_lgamma.c e_lgamma_r.c \
-	e_log.c e_log10.c e_pow.c e_rem_pio2.c e_remainder.c \
-	e_scalb.c e_sinh.c e_sqrt.c \
-	w_acos.c w_acosh.c w_asin.c w_atan2.c \
-	w_atanh.c w_cosh.c w_exp.c w_fmod.c \
-	w_gamma.c w_gamma_r.c w_hypot.c w_j0.c \
-	w_j1.c w_jn.c w_lgamma.c w_lgamma_r.c \
-	w_log.c w_log10.c w_pow.c w_remainder.c \
-	w_scalb.c w_sinh.c w_sqrt.c \
-	s_asinh.c s_atan.c s_cbrt.c s_ceil.c s_copysign.c \
-	s_cos.c s_erf.c s_expm1.c s_fabs.c s_finite.c s_floor.c \
-	s_frexp.c s_ilogb.c s_isnan.c s_ldexp.c s_lib_version.c \
-	s_log1p.c s_logb.c s_matherr.c s_modf.c s_nextafter.c \
-	s_rint.c s_scalbn.c s_signgam.c s_significand.c s_sin.c \
-	s_tan.c s_tanh.c
-
-obj = 	k_standard.o k_rem_pio2.o \
-	k_cos.o k_sin.o k_tan.o \
-	e_acos.o e_acosh.o e_asin.o e_atan2.o \
-	e_atanh.o e_cosh.o e_exp.o e_fmod.o \
-	e_gamma.o e_gamma_r.o e_hypot.o e_j0.o \
-	e_j1.o e_jn.o e_lgamma.o e_lgamma_r.o \
-	e_log.o e_log10.o e_pow.o e_rem_pio2.o e_remainder.o  \
-	e_scalb.o e_sinh.o e_sqrt.o \
-	w_acos.o w_acosh.o w_asin.o w_atan2.o \
-	w_atanh.o w_cosh.o w_exp.o w_fmod.o \
-	w_gamma.o w_gamma_r.o w_hypot.o w_j0.o \
-	w_j1.o w_jn.o w_lgamma.o w_lgamma_r.o \
-	w_log.o w_log10.o w_pow.o w_remainder.o \
-	w_scalb.o w_sinh.o w_sqrt.o \
-	s_asinh.o s_atan.o s_cbrt.o s_ceil.o s_copysign.o \
-	s_cos.o s_erf.o s_expm1.o s_fabs.o s_finite.o s_floor.o \
-	s_frexp.o s_ilogb.o s_isnan.o s_ldexp.o s_lib_version.o \
-	s_log1p.o s_logb.o s_matherr.o s_modf.o s_nextafter.o \
-	s_rint.o s_scalbn.o s_signgam.o s_significand.o s_sin.o \
-	s_tan.o s_tanh.o
-
-all: libm.a 
-
-libm.a : $(obj) 
-	ar cru libm.a $(obj)
-	ranlib libm.a
+# Custom dx Makefile for the fdlibm library.
+#
+# See http://www.netlib.org/fdlibm/ orhttp://www.validlab.com/software/
+#
+
+include ../../Makefile.src
+
+
+#
+# Enable standard/default IEEE libm behavior
+#
+CC_DEFINES += -D_IEEE_LIBM
+
+
+#
+# Additional flags specifically for this library, mostly to cut down the
+# list of innocuous warnings; other (potentially more serious) warnings are
+# intentionally left enabled
+#
+CC_FLAGS += -fno-strict-aliasing \
+			-Wno-parentheses \
+			-Wno-shadow \
+			-Wno-unused-but-set-variable \
+			-Wno-unused-variable \
+			-Wno-unknown-pragmas
+
+
+#
+# The individual object files that comprise the C library
+#
+LIBM_OBJECTS	:=	libm.o \
+					k_standard.o \
+					k_rem_pio2.o \
+					k_cos.o \
+					k_sin.o \
+					k_tan.o \
+					e_acos.o \
+					e_acosh.o \
+					e_asin.o \
+					e_atan2.o \
+					e_atanh.o \
+					e_cosh.o \
+					e_exp.o \
+					e_fmod.o \
+					e_gamma.o \
+					e_gamma_r.o \
+					e_hypot.o \
+					e_j0.o \
+					e_j1.o \
+					e_jn.o \
+					e_lgamma.o \
+					e_lgamma_r.o \
+					e_log.o \
+					e_log10.o \
+					e_pow.o \
+					e_rem_pio2.o \
+					e_remainder.o  \
+					e_scalb.o \
+					e_sinh.o \
+					e_sqrt.o \
+					w_acos.o \
+					w_acosh.o \
+					w_asin.o \
+					w_atan2.o \
+					w_atanh.o \
+					w_cosh.o \
+					w_exp.o \
+					w_fmod.o \
+					w_gamma.o \
+					w_gamma_r.o \
+					w_hypot.o \
+					w_j0.o \
+					w_j1.o \
+					w_jn.o \
+					w_lgamma.o \
+					w_lgamma_r.o \
+					w_log.o \
+					w_log10.o \
+					w_pow.o \
+					w_remainder.o \
+					w_scalb.o \
+					w_sinh.o \
+					w_sqrt.o \
+					s_asinh.o \
+					s_atan.o \
+					s_cbrt.o \
+					s_ceil.o \
+					s_copysign.o \
+					s_cos.o \
+					s_erf.o \
+					s_expm1.o \
+					s_fabs.o \
+					s_finite.o \
+					s_floor.o \
+					s_frexp.o \
+					s_ilogb.o \
+					s_isnan.o \
+					s_ldexp.o \
+					s_lib_version.o \
+					s_log1p.o \
+					s_logb.o \
+					s_matherr.o \
+					s_modf.o \
+					s_nextafter.o \
+					s_rint.o \
+					s_scalbn.o \
+					s_signgam.o \
+					s_significand.o \
+					s_sin.o \
+					s_tan.o \
+					s_tanh.o
+
+LIBM_FILE := $(notdir $(LINK_LIBM))
+
+
+
+#
+# Build the actual libm library
+#
+all: $(LIBM_FILE)
+
+$(LIBM_FILE): $(LIBM_OBJECTS)
+
+
+
+#
+# Generate/include the dependencies for the local objects
+#
+LOCAL_DEPENDENCIES := $(LIBM_OBJECTS:%.o=%.dep)
+ifeq ($(filter clean, $(MAKECMDGOALS)),)
+-include $(LOCAL_DEPENDENCIES)
+endif
+
+
+
+#
+# Clean the local directory
+#
+clean:
+	@rm -f $(LIBM_FILE)
+	@rm -f $(LIBM_OBJECTS)
+	@rm -f $(LOCAL_DEPENDENCIES)
 
-source: $(src) README
 
-clean: 
-	/bin/rm -f $(obj) a.out libm.a
diff -Naur libm.original/Makefile.fdlibm libm.modified/Makefile.fdlibm
--- libm.original/Makefile.fdlibm	1969-12-31 16:00:00.000000000 -0800
+++ libm.modified/Makefile.fdlibm	2011-09-08 21:47:25.976050198 -0700
@@ -0,0 +1,114 @@
+#
+#  @(#)Makefile 1.4 95/01/18 
+# 
+#  ====================================================
+#  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
+# 
+#  Developed at SunSoft, a Sun Microsystems, Inc. business.
+#  Permission to use, copy, modify, and distribute this
+#  software is freely granted, provided that this notice 
+#  is preserved.
+#  ====================================================
+# 
+# 
+
+#
+# There are two options in making libm at fdlibm compile time:
+# 	_IEEE_LIBM 	--- IEEE libm; smaller, and somewhat faster
+#	_MULTI_LIBM	--- Support multi-standard at runtime by 
+#			    imposing wrapper functions defined in 
+#			    fdlibm.h:
+#				_IEEE_MODE 	-- IEEE
+#				_XOPEN_MODE 	-- X/OPEN
+#				_POSIX_MODE 	-- POSIX/ANSI
+#				_SVID3_MODE 	-- SVID
+#
+# Here is how to set up CFLAGS to create the desired libm at 
+# compile time:
+#
+# 	CFLAGS = -D_IEEE_LIBM		... IEEE libm (recommended)
+#	CFLAGS = -D_SVID3_MODE	... Multi-standard supported
+#					    libm with SVID as the 
+#					    default standard
+#	CFLAGS = -D_XOPEN_MODE	... Multi-standard supported
+#					    libm with XOPEN as the 
+#					    default standard
+#	CFLAGS = -D_POSIX_MODE	... Multi-standard supported
+#					    libm with POSIX as the 
+#					    default standard
+#	CFLAGS = 			... Multi-standard supported
+#					    libm with IEEE as the 
+#					    default standard
+# 
+# NOTE: if scalb's second arguement is an int, then one must
+# define _SCALB_INT in CFLAGS. The default prototype of scalb
+# is double scalb(double, double)
+#
+
+
+#
+# Default IEEE libm
+#
+CFLAGS = -D_IEEE_LIBM 
+
+CC = cc
+
+INCFILES = fdlibm.h
+.INIT: $(INCFILES)
+.KEEP_STATE:
+src = 	k_standard.c k_rem_pio2.c \
+	k_cos.c k_sin.c k_tan.c \
+	e_acos.c e_acosh.c e_asin.c e_atan2.c \
+	e_atanh.c e_cosh.c e_exp.c e_fmod.c \
+	e_gamma.c e_gamma_r.c e_hypot.c e_j0.c \
+	e_j1.c e_jn.c e_lgamma.c e_lgamma_r.c \
+	e_log.c e_log10.c e_pow.c e_rem_pio2.c e_remainder.c \
+	e_scalb.c e_sinh.c e_sqrt.c \
+	w_acos.c w_acosh.c w_asin.c w_atan2.c \
+	w_atanh.c w_cosh.c w_exp.c w_fmod.c \
+	w_gamma.c w_gamma_r.c w_hypot.c w_j0.c \
+	w_j1.c w_jn.c w_lgamma.c w_lgamma_r.c \
+	w_log.c w_log10.c w_pow.c w_remainder.c \
+	w_scalb.c w_sinh.c w_sqrt.c \
+	s_asinh.c s_atan.c s_cbrt.c s_ceil.c s_copysign.c \
+	s_cos.c s_erf.c s_expm1.c s_fabs.c s_finite.c s_floor.c \
+	s_frexp.c s_ilogb.c s_isnan.c s_ldexp.c s_lib_version.c \
+	s_log1p.c s_logb.c s_matherr.c s_modf.c s_nextafter.c \
+	s_rint.c s_scalbn.c s_signgam.c s_significand.c s_sin.c \
+	s_tan.c s_tanh.c
+
+obj = 	k_standard.o k_rem_pio2.o \
+	k_cos.o k_sin.o k_tan.o \
+	e_acos.o e_acosh.o e_asin.o e_atan2.o \
+	e_atanh.o e_cosh.o e_exp.o e_fmod.o \
+	e_gamma.o e_gamma_r.o e_hypot.o e_j0.o \
+	e_j1.o e_jn.o e_lgamma.o e_lgamma_r.o \
+	e_log.o e_log10.o e_pow.o e_rem_pio2.o e_remainder.o  \
+	e_scalb.o e_sinh.o e_sqrt.o \
+	w_acos.o w_acosh.o w_asin.o w_atan2.o \
+	w_atanh.o w_cosh.o w_exp.o w_fmod.o \
+	w_gamma.o w_gamma_r.o w_hypot.o w_j0.o \
+	w_j1.o w_jn.o w_lgamma.o w_lgamma_r.o \
+	w_log.o w_log10.o w_pow.o w_remainder.o \
+	w_scalb.o w_sinh.o w_sqrt.o \
+	s_asinh.o s_atan.o s_cbrt.o s_ceil.o s_copysign.o \
+	s_cos.o s_erf.o s_expm1.o s_fabs.o s_finite.o s_floor.o \
+	s_frexp.o s_ilogb.o s_isnan.o s_ldexp.o s_lib_version.o \
+	s_log1p.o s_logb.o s_matherr.o s_modf.o s_nextafter.o \
+	s_rint.o s_scalbn.o s_signgam.o s_significand.o s_sin.o \
+	s_tan.o s_tanh.o
+
+all: libm.a 
+
+libm.a : $(obj) 
+	ar cru libm.a $(obj)
+	ranlib libm.a
+
+source: $(src) README
+
+clean: 
+	/bin/rm -f $(obj) a.out libm.a
+
+neener:
+	@echo MF=$(MAKEFLAGS)
+	$(MAKE) all
