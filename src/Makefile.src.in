#
# Makefile.src
#
# This file contains basic definitions and default values for all OS
# components: the kernel, loadable drivers, applications, user libraries, etc.
# Customization of these settings (additions, mostly) should be handled further
# down the tree as necessary
#
# Environment variables that affect the processing of this makefile:
#	* "DEBUG" may be set to produce a debug build.  By default, the build
#	   process will produce a production/release build if this value is not
#	   set.  Typically, this value should be set on the command-line (e.g.,
#	   "make DEBUG=1").
#
#	* "DX_ROOT_DIR" should point to the root of the source tree;
#	   typically, this should be declared in the local environment
#	   (e.g., "export DX_ROOT_DIR=~/src/dx").  This value must be set
#	   before building.
#


#
# Inherit the global OS build settings
#
include $(DX_ROOT_DIR)/Makefile.dx



#
# Tools.  See doc/tools.txt for specific version requirements
#
AR			:= @AR@
ASM			:= @ASM@
CC			:= @CC@
CXX			:= @CXX@
LINK		:= @LD@
NM			:= @NM@
OBJCOPY		:= @OBJCOPY@
OBJDUMP		:= @OBJDUMP@
PATCH		:= @PATCH@
SHELL		:= @SHELL@
STRIP		:= @STRIP@
TAR			:= @TAR@



#
# Default tool settings
#
AR_FLAGS		= -rcs
ASM_DEFINES		= -D@SIZET_DEFINITION@
ASM_FLAGS		= -c -o $@ -xassembler-with-cpp
ASM_INCLUDES	= -I. -I$(DX_SRC_DIR)/inc
CC_DEFINES		= $(ASM_DEFINES)
CC_FLAGS		= -c -march=i586 -nostdinc -o $@ -pipe -W -Wall -Wshadow
CC_INCLUDES		= $(ASM_INCLUDES)
CXX_DEFINES		= $(CC_DEFINES)
CXX_FLAGS		= $(CC_FLAGS)
CXX_INCLUDES	= $(CC_INCLUDES)
LINK_FLAGS		= -nostdlib -o $@
NM_FLAGS		= -C -n
OBJDUMP_FLAGS	= -C -d
STRIP_FLAGS		=



#
# Production or debug build?
#
ifdef DEBUG
	CC_DEFINES  += -DDEBUG -O0
	CXX_DEFINES += -DDEBUG -O0
else
	CC_FLAGS  += -O2 -fomit-frame-pointer -DNDEBUG
	CXX_FLAGS += -O2 -fomit-frame-pointer -DNDEBUG
endif



#
# Child trees
#
DX_SRC_KERNEL_DIR	:= $(DX_SRC_DIR)/kernel
DX_SRC_LIB_DIR		:= $(DX_SRC_DIR)/lib
DX_SRC_USER_DIR		:= $(DX_SRC_DIR)/user



#
# The various supporting libraries.  Mostly user code, but some shared by
# the kernel, too
#
LINK_LIBC			:= $(DX_SRC_LIB_DIR)/libc/libc.a
LINK_LIBDX			:= $(DX_SRC_LIB_DIR)/libdx/libdx.a
LINK_LIBGCC			:= $(shell $(CC) $(CC_FLAGS) --print-libgcc-file-name)
LINK_LIBGDTOA		:= $(DX_SRC_LIB_DIR)/libgdtoa/libgdtoa.a
LINK_LIBLUA			:= $(DX_SRC_LIB_DIR)/liblua/src/liblua.a
LINK_LIBM			:= $(DX_SRC_LIB_DIR)/libm/libm.a
LINK_LIBTAR			:= $(DX_SRC_LIB_DIR)/libtar/libtar.a
LINK_START_FILE		:= $(DX_SRC_LIB_DIR)/user_start/user_start.o


#
# The kernel requires only libc and gcc support
#
LINK_KERNEL_LIBS	:= $(LINK_LIBC) $(LINK_LIBGCC)


#
# All user executables require at least libc, gcc support, libdx (system calls).
# Additional libraries may be requested via LINK_EXTRA_LIBS.
#
LINK_USER_LIBS	:= $(LINK_LIBC) $(LINK_LIBDX) $(LINK_LIBGDTOA) $(LINK_LIBGCC)


#
# As a nicety, rebuild any of the well-known libraries from anywhere in the
# tree; this is mainly useful when building individual subdirectories.  Assumes
# that external sources/libraries have already been unpacked.
#
$(LINK_USER_LIBS) $(LINK_EXTRA_LIBS):
	@echo "Automatically rebuilding: $@"
	@$(MAKE) -C $(dir $@)



#
# Inference rules
#
%.o: %.asm $(MAKEFILE_LIST)
	@echo Assembling $< ...
	@$(ASM) $(ASM_INCLUDES) $(ASM_FLAGS) $(ASM_DEFINES) $<

%.o: %.cpp $(MAKEFILE_LIST)
	@echo Compiling $< ...
	@$(CXX) $(CXX_INCLUDES) $(CXX_FLAGS) $(CXX_DEFINES) $<

%.o: %.c $(MAKEFILE_LIST)
	@echo Compiling $< ...
	@$(CC) $(CC_INCLUDES) $(CC_FLAGS) $(CC_DEFINES) $<

%.a: %.o $(MAKEFILE_LIST)
	@echo Archiving $@ ...
	@$(AR) $(AR_FLAGS) $@ $(filter-out $(MAKEFILE_LIST), $^)

%.exe: %.o $(LINK_START_FILE) $(LINK_USER_LIBS) $(LINK_EXTRA_LIBS) $(MAKEFILE_LIST)
	@echo Linking $@ ...
	@$(LINK) $(LINK_FLAGS) $(LINK_TEXT_SECTION) \
		$(filter %.o, $^) $(LINK_EXTRA_LIBS) \
		--start-group $(LINK_LIBC) $(LINK_LIBDX) $(LINK_LIBGDTOA) --end-group \
		$(LINK_LIBGCC)

%.dep: %.asm $(MAKEFILE_LIST)
	@echo Generating dependencies for $< ...
	@$(ASM) -xassembler-with-cpp $(ASM_INCLUDES) $(ASM_DEFINES) \
		-M -MT '$*.o $*.dep' $< > $@

%.dep: %.c $(MAKEFILE_LIST)
	@echo Generating dependencies for $< ...
	@$(CC) $(CC_INCLUDES) $(CC_DEFINES) -M -MT '$*.o $*.dep' $< > $@

%.dep: %.cpp $(MAKEFILE_LIST)
	@echo Generating dependencies for $< ...
	@$(CXX) $(CXX_INCLUDES) $(CXX_DEFINES) -M -MT '$*.o $*.dep' $< > $@


