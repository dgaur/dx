
* Cross-compiling DX under Cygwin *


This document describes how to configure + build the GNU toolchain under
cygwin.  Typically this is necessary because the default tools are
configured to produce PE object files (the Windows native format), whereas
DX requires ELF object files.  If you are building natively under Linux
or *BSD, this should not be necessary.



* Building binutils:
	- The instructions here are known to work with binutils-2.19.1.
	- Fetch and unpack the source tarball for binutils:
		% tar xvzf binutils-<version>.tar.gz

	- The binutils documentation suggests building in separate directory, not
	  in the same directory as the source:
		% mkdir /path/to/output/dir
		% cd /path/to/output/dir

	- Configure the binutils tree.  The --target setting is the key
	  configuration item; the whole point of this effort is to build ELF tools:
		% /path/to/binutils-<version>/configure --target=i686-elf

	- Install and build the new binutils
		% make
		% make install

	- Verify that you now have i686-elf-as, i686-elf-ld, i686-elf-nm and
	  i686-elf-objdump.  Typically, these will be installed under
	  /usr/local/bin, but may be elsewhere depending on your configure options.
	  Ensure that "elf32-i386" is a supported target.
		% which i686-elf-objdump
			> /usr/local/bin/i686-elf-objdump

		% i686-elf-objdump.exe -i | head -4
			> BFD header file version (GNU Binutils) 2.19.1
			> elf32-i386
			>  (header little endian, data little endian)
			>   i386


* Building GMP
	- Recent releases of gcc require GMP (GNU multiprecision math library).
	- Fetch and unpack the gmp tarball.
	- This is the usual installation process:
		% tar xvzf gmp-<version>.tar.gz
		% cd gmp-<version>
		% configure
		% make
		% make check
		% make install


* Building MPFR
	- Recent releases of gcc require GNU MPFR (GNU multiprecision floating
	  point library).
	- Fetch and unpack the mpfr tarball.
	- This is the usual installation process:
		% tar xvzf mpfr-<version>.tar.gz
		% cd mpfr-<version>
		% configure
		% make
		% make check
		% make install


* Building gcc and g++
	- The instructions here are known to work with gcc 4.4.1.
	- Fetch and unpack the source tarballs for gcc-core and gcc-g++.  The
	  gcc-core and gcc-g++ tarballs should both unpack into the same output
	  directory, usually gcc-<version>:
		% tar xvzf gcc-core-<version>.tar.gz
		% tar xvzf gcc-g++-<version>.tar.gz

	- The GCC documentation suggests building in separate directory, not
	  in the same directory as the source:
		% mkdir /path/to/output/dir
		% cd /path/to/output/dir

	- Configure the gcc tree.  Use the same --target value that you used with
	  the binutils configuration.  Enable support for at least C and C++
	  compilation:
		% /path/to/gcc-<version>/configure --target=i686-elf
		   --enable-languages="c,c++" --with-gnu-as --with-gnu-ld

	- Build and install gcc.  Compilation errors in libstdc++ (typically "No
	  support for this host/target combination" or "Link tests are not allowed
	  after GCC_NO_EXECUTABLES") are not usually fatal and can usually be
	  ignored.  None of the dx code relies on libstdc++ anyway.  See, e.g.,
	  this thread: http://gcc.gnu.org/ml/gcc/2008-03/msg00510.html
		% make
		% make install

	- Verify that you now have i686-elf-gcc and i686-elf-g++.  Typically, these
	  will be installed under /usr/local/bin, but may be elsewhere depending on
	  your configure options.
		% which i686-elf-gcc
			> /usr/local/bin/i686-elf-gcc

	- Build and install the personalized libgcc.a for your cross-compiler
		% make all-target-libgcc
		% make install-target-libgcc
		% i686-elf-gcc --print-libgcc-file-name
			> /usr/local/lib/gcc/i686-elf/4.4.1/libgcc.a

	- Configure your build environment to use the new cross-tools.
		% cd /path/to/dx/source/tree
		% configure --host=i686-elf



