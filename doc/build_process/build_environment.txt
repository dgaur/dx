
* DX Build Environment *



This document provides a brief overview of the DX build environment.  See also
directory_layout.txt for a brief description of the source tree layout.

In general, DX requires a Unix-ish build environment: bash, gcc, binutils, etc.
Building in cygwin is supported, but requires an ELF cross-compiler.  Building
in Linux/BSD is supported, with native tools.



* Executive summary:
	% export DX_ROOT_DIR=/path/to/dx/tree
	% cd ${DX_ROOT_DIR}
	% configure
	% make all



* Building the code:
	Define the environment variable DX_ROOT_DIR; it should point to the root
	of the DX source tree.
	@@@this does not work well when cloning multiple hg trees
	Example:
		% export DX_ROOT_DIR=~/src/dx
		% cd ${DX_ROOT_DIR}

	Configure your build tree to use the appropriate build tools.  For Linux,
	BSD and Unix-ish systems, the default "configure" options are probably
	sufficient.
	Example:
		% ./configure

	If you are cross-compiling (e.g., under cygwin), then pass the appropriate
	--host option to "configure".  You may also need to add /usr/sbin to your
	cygwin PATH; or else provide explicit paths to the file-system tools if
	you intend to build media images.
	Example:
		% ./configure --host=i586-elf DEBUGFS=/usr/sbin/debugfs \
			E2FSCK=/usr/sbin/e2fsck

	Use "make all" in the dx root directory to build the entire dx tree: the
	kernel, applications, libraries, media images, doxygen documentation, etc.
	Example:
		% make all

	In addition, "make help" will provide a brief list of all other build
	targets and options.
	Example:
		% cd ${DX_ROOT_DIR}
		% make help



* Makefile.dx:
	${DX_ROOT_DIR}/Makefile.dx contains common defintions used throughout
	the entire DX source tree.  All other makefiles should include this one.

	DX_ROOT_DIR should be set in the local environment; it should
	point to the root of the DX source tree.  Once this is done,
	makefiles can include $(DX_ROOT_DIR)/Makefile.dx to inherit the
	global build options.



* Makefile.src:
	${DX_ROOT_DIR}/src/Makefile.src contains common build definitions used
	throughout the source tree.  All makefiles under ${DX_ROOT_DIR}/src should
	include this one.  Note that this file is generated by "configure" from
	the contents of ${DX_ROOT_DIR}/src/Makefile.src.in.



* Makefile.common, Makefile.kernel, Makefile.user:
	These makefiles contain common build definitions for the common library
	code; the kernel code; and user code; respectively.  These makefiles live
	in the corresponding subdirectories beneath ${DX_ROOT_DIR}/src.

	In general,	these makefiles inherit all of the settings from Makefile.src
	and simply add any additional flags or settings as needed.



* Makefile.inc:
	Every kernel subdirectory contains a file named Makefile.inc, which
	describes the dependencies for the code in that directory.  Adding or
	deleting a file in a directory typically only requires updating
	Makefile.inc.

	Makefile.inc is included by multiple makefiles: the Makefile in the
	same directory; and the Makefile in parent kernel directory.

	The local directory name is encoded within each Makefile.inc, so moving
	or renaming directories will require editing Makefile.inc.



* dx.link:
	This is the script for controlling the kernel link and layout of the
	kernel image.  This file dictates the location of the initial kernel
	image and the location of the initial boot thread context.  Invoked from
	$(DX_KERNEL_DIR)/Makefile at link-time.



