#!/bin/sh
#
# Pseudo-configure script for locating dx build tools
#
# This is intended to look like and mimic the behavior of a normal
# autoconf/configure script; but is really just a simple shell script for
# locating build tools on the local host.  It searches the current PATH for
# necessary tools; and inserts those tool paths into the necessary Makefiles.
#
# The goal here is to provide some measure of build portability across
# different platforms.  At a minimum, this script should work on Linux and
# cygwin.  Should probably work under *BSD, too, but not tested.
#
# The script assumes that it can find 'which' and 'sed' in the current PATH.
# It (probably?) relies on some 'bash' features.  All other dependencies should
# be resolved by the script itself.
#
# Usage:
#	% configure [options] [tool-definitions]
#




#
# Find the absolute path to the specified tool.  If found, set TOOL to this
# path value
#
function find_tool
	{
	echo -n "Looking for $1 ... "

	TOOL=`which $1 2>/dev/null`
	if [ -n "${TOOL}" ]; then
		# Found tool in current PATH
		echo ${TOOL}
		return 0

	elif [ -e $1 ]; then
		# Not in PATH, but user provided explicit path on command line
		TOOL=$1
		echo ${TOOL}
		return 0

	elif [ -n "$2" ]; then
		# Unable to find required tool.  Fatal.
		echo "Error: Unable to find $1 (required)"
		exit 1

	else
		# Unable to find optional tool.  OK to proceed, but some functionality
		# may be lost, etc
		echo "Warning: Unable to find $1 (optional)"
		TOOL="/no/path/to/$1"
		return 1
	fi
	}



#
# Show supported options + exit
#
function help
	{
	cat <<-END_OF_HELP

DX pseudo-configure script

Usage:
    $0 [-h|--help] [--host=<HOST-SPEC>] [TOOL-DEFINITIONS]

    -h, --help displays this help message

    --host=<HOST-SPEC> enables cross-compilation support.  Required for
      platforms that do not natively support ELF file format (typically, only
      cygwin?).  HOST-SPEC should be the usual "cpu-vendor-os" triplet.  For
      example, if your cross compiler is i686-pc-elf-gcc, then use
      --host=i686-pc-elf

    TOOL-DEFINITIONS are paths + overrides for specifying tools and tool
      locations.  For example, if you have gcc installed under
      /non/standard/path/to/my-gcc then add CC=/non/standard/path/to/my-gcc
      to the command line.

      This script recognizes these definitions on the command line or in the
      environment:
        AR ASM CC CXX DEBUGFS DOXYGEN E2FSCK LD MKISOFS NM OBJCOPY OBJDUMP
        SHELL TAR

END_OF_HELP

	exit 1
	}





#
# main() #################################################################
#


#
# Fixup the PATH used by 'which'.  This is mainly required for cygwin, which
# can omit some useful directories by default
#
PATH=${PATH}:/usr/sbin:/sbin


#
# The 'which' tool is required; this script cannot proceed without it
#
WHICH=`which which 2>/dev/null`
if [ -z "${WHICH}" ]; then
	echo "Unable to find 'which' tool, required for configure operation"
	exit 2
fi


#
# Attempt to locate 'sed', for parsing --host values.  If not found, user can
# still override with SED=/path/to/sed on command line before --host value.
#
SED=`which sed 2>/dev/null`


#
# Parse the command line arguments, if any
#
for argument in $*; do
	case ${argument} in
		-d|--debug)
			# Enable debug support
			set -x
			;;


		-h|-?|--help)
			help
			;;


		--host=*)
			# Ensure sed is available first
			if [ -z "${SED}" ]; then
				echo "Error: Cannot process --host without 'sed'"
				echo "Try adding 'SED=/path/to/sed' definition to command line"
				exit 1
			fi

			# Assume the --host value is the prefix on the cross-tools (e.g.,
			# i386-elf-gcc)
			CROSS_COMPILE_PREFIX=`echo ${argument} | \
				${SED} 's/--host=\(.*\)/\1-/' -`

			if [ ${CROSS_COMPILE_PREFIX} != "-" ]; then
				echo "OK, will look for cross-tools (${CROSS_COMPILE_PREFIX})"
			else
				echo "Bad --host value"
				help
			fi
			;;


		*=*)
			# Assume this is an explicit definition or path to some tool (e.g,
			# CC=gcc, etc), so automatically include this definition locally
			# to override the defaults below
			eval ${argument}
			;;


		*)
			echo "Unrecognized argument: ${argument}"
			help
			;;
	esac
done


#
# Establish the basic tool definitions.  Values provided on the command line
# override the defaults provided here
#
AR=${AR:-ar}
ASM=${ASM:-${CROSS_COMPILE_PREFIX}as}
CC=${CC:-${CROSS_COMPILE_PREFIX}gcc}
DEBUGFS=${DEBUGFS:-debugfs}
DOXYGEN=${DOXYGEN:-doxygen}
E2FSCK=${E2FSCK:-e2fsck}
MKISOFS=${MKISOFS:-mkisofs}
NM=${NM:-nm}
OBJCOPY=${OBJCOPY:-objcopy}
OBJDUMP=${OBJDUMP:-objdump}
SHELL=${SHELL:-bash}
TAR=${TAR:-tar}


#
# Now infer any tool paths that were not specified explicitly on the command
# line
#
REQUIRED="required"
OPTIONAL=

find_tool ${AR}			${REQUIRED}
find_tool ${ASM}		${REQUIRED}
find_tool ${CC}			${REQUIRED}
find_tool ${DEBUGFS}	${OPTIONAL}
find_tool ${DOXYGEN}	${OPTIONAL}
find_tool ${E2FSCK}		${OPTIONAL}
find_tool ${MKISOFS}	${OPTIONAL}
find_tool ${NM}			${REQUIRED}
find_tool ${OBJCOPY}	${REQUIRED}
find_tool ${OBJDUMP}	${REQUIRED}
find_tool ${SHELL}		${REQUIRED}
find_tool ${TAR}		${REQUIRED}



