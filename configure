#!/bin/sh
#
# Pseudo-configure script for locating dx build tools
#
# This is intended to look like and mimic the behavior of a normal
# autoconf/configure script; but is really just a simple shell script for
# locating build tools on the local host.  As such, it's probably slower,
# buggier and less portable than the usual autoconf/configure tools.  On the
# other hand, it's more flexible in terms of cross-compiling, avoids some
# unnecessary (for dx) tests and probably(?) simpler.
#
# This script searches the current PATH + command-line overrides for the
# necessary tools; and inserts those tool paths into the various Makefiles.
# The goal here is to provide some measure of build portability across
# different platforms.  At a minimum, this script should work on Linux and
# cygwin.  Should probably work under *BSD, too, but not tested.  Other
# OS/environments are not supported.
#
# The script assumes that it can find 'cat', 'which' and 'sed' in the current
# PATH.  It (probably?) relies on some specific 'bash' features.  All other
# dependencies should be resolved by the script itself.
#
# See also the documentation under ${DX_ROOT_DIR}/doc/build_process
#
# Usage:
#	% configure [options] [tool-definitions]
#



#
# Tools used by the dx build process.  Some are required (e.g., for actually
# compiling the code); others are optional (e.g., only used for generating
# documentation)
#
OPTIONAL_TOOLS="DEBUGFS DOXYGEN E2FSCK MKISOFS"
REQUIRED_TOOLS="AR ASM CC CP CXX LD NM OBJCOPY OBJDUMP SED SHELL STRIP TAR"



#
# These are the makefiles written/updated by this script
#
OUTPUT_FILES="doc/html/Makefile \
			  media/iso/Makefile \
			  media/floppy/load-image.sh \
			  src/Makefile.src"


#
# All script output + debug information is logged here
#
CONFIGURE_LOG="$0.log"



#
# Ensure this tool is available, either via the PATH or via absolute path
#
function find_tool
	{
	local status=0

	echo -n "Looking for $1 ... "

	local tool=`which $1 2>/dev/null`
	if [ -n "${tool}" ]; then
		# Found tool in current PATH; or user provided explicit path on
		# the command line
		log "${tool}"
		status=0

	else
		log "Not found!"
		status=1
	fi

	return $status
	}



#
# Show supported options + exit
#
function help
	{
	cat <<-END_OF_HELP

DX pseudo-configure script

Usage:
$0 [--distclean] [-?|-h|--help] [--host=<HOST-SPEC>] [TOOL-DEFINITIONS]

    --distclean deletes any Makefiles generated by this script

    -h, --help displays this help message

    --host=<HOST-SPEC> enables cross-compilation support.  Required for
        platforms that do not natively support ELF file format (typically, only
        cygwin?).  HOST-SPEC should be the usual "cpu-vendor-os" triplet.  For
        example, if your cross compiler is i686-pc-elf-gcc, then use
        --host=i686-pc-elf

    TOOL-DEFINITIONS are paths + overrides for specifying tools and tool
        locations.  For example, if you have gcc installed under
        /non/standard/path/to/my-gcc then add CC=/non/standard/path/to/my-gcc
        to the command line.

        These tools are required (in the PATH, in the environment or on the
        command-line):
            ${REQUIRED_TOOLS}

        These tools are optional.  If not present, some build features may be
        unavailable:
            ${OPTIONAL_TOOLS}

    All script output is logged to ${CONFIGURE_LOG}

END_OF_HELP

	exit 1
	}



#
# Write a message to the console + the log file
#
function log
	{
	echo "$1"
	echo "$1" >> ${CONFIGURE_LOG}
	return
	}




#
# main() #################################################################
#


#
# Reset/restart the log file
#
cat >${CONFIGURE_LOG} <<-END_OF_LOG_HEADER

DX pseudo-configure script
Last invoked: `date`
Last invoked as: $0 $*

END_OF_LOG_HEADER



#
# The 'which' tool is required; this script cannot proceed without it
#
WHICH=`which which 2>/dev/null`
if [ -z "${WHICH}" ]; then
	log "Unable to find 'which' tool, required for configure operation"
	exit 2
fi



#
# Attempt to locate 'sed', for parsing --host values.  If not found, user can
# still override with SED=/path/to/sed on command line before --host value.
#
SED=`which sed 2>/dev/null`
if [ -z "${SED}" ]; then
	log "Unable to find 'sed' tool; expecting SED= on command line"
fi



#
# Parse the command line arguments, if any
#
for argument in $*; do
	case ${argument} in
		-d|--debug)
			# Enable debug support
			set -x
			;;


		--distclean)
			# Clean the output files generated by this script
			rm -f ${OUTPUT_FILES} ${CONFIGURE_LOG}
			exit 0
			;;


		-h|-?|--help)
			help
			;;


		--host=*)
			# Ensure sed is available first
			if [ -z "${SED}" ]; then
				log "Error: Cannot process --host without 'sed'"
				log "Try adding 'SED=/path/to/sed' definition to command line"
				exit 1
			fi

			# Assume the --host value is the prefix on the cross-tools (e.g.,
			# i386-elf-gcc)
			CROSS_COMPILE_PREFIX=`echo ${argument} | \
				${SED} 's/--host=\(.*\)/\1-/' -`

			if [ ${CROSS_COMPILE_PREFIX} != "-" ]; then
				log "OK, will look for cross-tools (${CROSS_COMPILE_PREFIX})"
			else
				log "Bad --host value"
				help
			fi
			;;


		*=*)
			# Assume this is an explicit definition or path to some tool (e.g,
			# CC=gcc, etc), so automatically include this definition locally
			# to override the defaults below
			eval ${argument}
			;;


		*)
			log "Unrecognized argument: ${argument}"
			help
			;;
	esac
done



#
# Establish the basic tool definitions.  Values provided on the command line
# override the defaults provided here
#
AR=${AR:-ar}
ASM=${ASM:-${CROSS_COMPILE_PREFIX}gcc}		# Use gcc front-end by default
CC=${CC:-${CROSS_COMPILE_PREFIX}gcc}
CP=${CP:-cp}
CXX=${CXX:-${CROSS_COMPILE_PREFIX}gcc}		# Use gcc front-end by default
DEBUGFS=${DEBUGFS:-debugfs}
DOXYGEN=${DOXYGEN:-doxygen}
E2FSCK=${E2FSCK:-e2fsck}
LD=${LD:-${CROSS_COMPILE_PREFIX}ld}
MKISOFS=${MKISOFS:-mkisofs}
NM=${NM:-nm}
OBJCOPY=${OBJCOPY:-objcopy}
OBJDUMP=${OBJDUMP:-objdump}
SED=${SED:-sed}
SHELL=${SHELL:-bash}
STRIP=${STRIP:-strip}
TAR=${TAR:-tar}



#
# Ensure the tools actually exist, either in the PATH or via the values given
# on the command line.  This does not actually invoke or validate the tools
# themselves -- a significant departure from the usual autoconf/configure
# behavior
#
for tool in ${REQUIRED_TOOLS}; do
	eval "find_tool \$${tool}"
	if [ $? -ne 0 ]; then
		log "Error: Unable to find required tool: ${tool}"
		exit 1
	fi
done

for tool in ${OPTIONAL_TOOLS}; do
	eval "find_tool \$${tool}"
	if [ $? -ne 0 ]; then
		log "Warning: Unable to find optional tool: ${tool}"
	fi
done



#
# Generate a sed script to insert the various tool definitions
#
log
log "Generating translation script ..."

SED_PROGRAM="$0.sed.$$"
echo > ${SED_PROGRAM}
for tool in ${REQUIRED_TOOLS} ${OPTIONAL_TOOLS}; do
	# The script is a series of "s/tool-pattern/tool-path/" commands
	eval "echo \"s,@${tool}@,\$${tool},g\" >> ${SED_PROGRAM}"
done

if [ ! -e ${SED_PROGRAM} ]; then
	log "Unable to generate 'sed' program!"
	exit 1
fi

echo "SED SCRIPT:" >> ${CONFIGURE_LOG}
cat ${SED_PROGRAM} >> ${CONFIGURE_LOG}
echo "END OF SCRIPT" >> ${CONFIGURE_LOG}
echo "" >> ${CONFIGURE_LOG}



#
# Now generate the various makefiles, inserting these tool definitions where
# necessary
#
for output_file in ${OUTPUT_FILES}; do
	input_file="${output_file}.in"

	if [ ! -e ${input_file} ]; then
		log "Skipping missing input file: ${input_file}"
		continue
	fi

	# Create + fixup the output file with the detected tool settings
	log "Generating: ${output_file}"
	${SED} -f ${SED_PROGRAM} --posix ${input_file} > ${output_file}
done



#
# Done.  Cleanup + exit
#
rm ${SED_PROGRAM}

log
log "Done!"
log
exit 0

